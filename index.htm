<meta charset=utf-8>
<title>Wonder Parade</title>
<style>
    body {
        height: 640px;
        width: 1136px;
        border: solid 1px #000;
        overflow: hidden;
        position: relative;
        font-family: -apple-system, Arial, 'PingFang SC', 'STHeiti Light', 'Hiragino Kaku Gothic ProN', 'Microsoft YaHei', sans-serif
    }

    canvas {
        height: 132px;
        width: 100%;
        position: absolute;
        bottom: 0;
        left: 0;
        background: #CCC
    }

    .diff {
        padding: 5px;
        background: #DDD;
        margin: 5px;
        border-radius: 5px;
        cursor: pointer;
    }

    .diff.select {
        background: #BBB
    }
</style>
<script async src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.0.4/howler.core.min.js" integrity="sha256-X01rV9/R1vbHm3CxMRt6AFMe0Ea9wnpAGsurU3QkZU4="
    crossorigin="anonymous"></script>
<div style="height:50px">　</div>
<div><a href="https://itunes.apple.com/cn/app/id1239334316" target=_blank>&copy;Copyright StudioQuare 2017</a></div>
<div style="padding:5px">FPS:<span id=fps></span></div>
<div><input type="range" min=0.5 max=4 value=1 step="0.05" onchange="this.parentNode.lastChild.textContent=appearGap=this.value">
    <span id="appearGap">1</span></div>
<div id="downloading"></div>
<canvas></canvas>
<div id="player" style="width:300px;margin:5px"></div>
<div id="changeMsg" style="white-space:pre-wrap"></div>
<script>
    function _(e, t, n) { var r = null; if ("text" === e) return document.createTextNode(t); r = document.createElement(e); for (var l in t) if ("style" === l) for (var a in t.style) r.style[a] = t.style[a]; else if ("className" === l) r.className = t[l]; else if ("event" === l) for (var a in t[l]) r.addEventListener(a, t[l][a]); else r.setAttribute(l, t[l]); if (n) for (var s = 0; s < n.length; s++)null != n[s] && r.appendChild(n[s]); return r }
    var audio, player, sfx, canvas, appearGap = 1, sfxOn = true, patternRawDiv, songSelect, songList, diffSelect, song = '001';
    document.head.appendChild(_('script', {
        src: 'https://estertion.win/wp-content/plugins/light-weight-player/musicplayer.min.js',
        event: {
            load: function () {
                window.player = new MusicPlayer({
                    element: document.getElementById('player'),
                    src: 'data:',
                    id: 'LightWeightPlayer',
                    borderWidth: '1px',
                    autoPlay: false,
                    loop: false,
                    color: {
                        'played': 'rgb(255,81,81)',
                        'buffered': '#EEE',
                        'blank': '#EEE',
                        'border': '#DDD'
                    }
                });
                audio = player.audio;
            }
        }
    }));
    function loadResource(url, param) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        for (var key in param) {
            xhr[key] = param[key];
        }
        xhr.addEventListener('readystatechange', function () {
            if (this.readyState == 4) {
                this.dispatchEvent(new Event('downloaded'));
            }
        });
        xhr.send();
        return xhr;
    }
    function loadPattern(song, difficulty) {
        loadResource('Data/Pattern/' + song + difficulty + '.wpp').addEventListener('downloaded', function () {
            var data = this.response,
                tree = new DOMParser().parseFromString(data, 'text/html'),
                info = tree.getElementsByTagName('data')[0],
                note = tree.getElementsByTagName('note')[0],
                bpm = info.getAttribute('bpm');
            note = note.textContent.replace(/\n/g, '').split(';');
            sfx.point.stop();
            sfx.line.stop();
            parseNote(bpm, note);
        });
    }
    function log(s) {
        var msg = document.getElementById('changeMsg');
        var list = msg.textContent.split('\n');
        list.push(s);
        list.length > 5 && list.shift();
        msg.textContent = list.join('\n');
    }
    var noteSchedule = [], patternRaw = [];
    function parseNote(bpm, note) {
        var sectionSize = 4;
        var sectionInt = 60 / bpm;
        var prevSec = 0;
        var prevStartTime = 0;
        noteSchedule = [];
        patternRaw = [];
        note.forEach(function (i) {
            var command = i.split('|');
            var section = (command.shift() | 0);
            (prevSec === 0) && (prevSec = section);
            var sectionStartTime = prevStartTime + (section - prevSec) * sectionSize * sectionInt;
            prevStartTime = sectionStartTime;
            patternRaw.push({
                time: sectionStartTime,
                pattern: i
            });
            var message = [];
            command.forEach(function (i) {
                var detail = i.split(':');
                var side;
                switch (detail[0]) {
                    case 'm':
                        //mode?
                        message.push('mode set to ' + detail[1]);
                        return;
                    case 's':
                        //section size
                        sectionSize = detail[1] | 0;
                        message.push('sectionSize set to ' + sectionSize);
                        return;
                    case 'b':
                        //bpm change
                        bpm = detail[1] | 0;
                        sectionInt = 60 / bpm;
                        message.push('bpm set to ' + bpm);
                        return;
                    case '1':
                        //left side
                        side = 1;
                        break;
                    case '2':
                        //right side
                        side = 2;
                        break;
                    default:
                        return;
                }
                var noteInt = sectionInt * sectionSize / detail[1].length;
                var off = 0;
                detail[1].split('').forEach(function (note) {
                    off++;
                    note |= 0;
                    var type;
                    switch (note) {
                        case 0:
                            return;
                        case 1:
                        //single tap
                        case 2:
                            //twin tap
                            type = 'tap';
                            break;
                        case 3:
                        //hold start
                        case 4:
                            //twin hold start
                            type = 'hold';
                            break;
                        case 5:
                            //hold end
                            type = 'release';
                            break;
                        default: return;
                    }
                    noteSchedule.push({
                        time: sectionStartTime + (off - 1) * noteInt,
                        side,
                        type,
                        note,
                        message
                    });
                    message.length && (message = []);
                });
            });
            prevSec = section;
        });
        noteSchedule.sort(function (a, b) {
            return a.time - b.time;
        });
        var reprocess = [], leftHoldStart = [], rightHoldStart = [];
        noteSchedule.forEach(function (i) {
            if (i.type === 'tap') {
                reprocess.push({
                    time: i.time,
                    type: 'point',
                    side: i.side,
                    isTwin: (i.note === 2),
                    message: i.message
                });
            } else if (i.type === 'hold') {
                if (i.side === 1)
                    leftHoldStart = [i.time, i.note === 4];
                else
                    rightHoldStart = [i.time, i.note === 4];
            } else if (i.type === 'release') {
                reprocess.push({
                    time: ((i.side === 2) ? rightHoldStart : leftHoldStart)[0],
                    end: i.time,
                    type: 'line',
                    side: i.side,
                    isTwin: ((i.side === 2) ? rightHoldStart : leftHoldStart)[1],
                    message: i.message
                });
                if (i.side === 1)
                    leftHoldStart = [];
                else
                    rightHoldStart = [];
            }
        });
        noteSchedule = reprocess;
        noteSchedule.sort(function (a, b) {
            return a.time - b.time;
        });
    }
    audio = document.querySelector('audio');
    canvas = document.querySelector('canvas');
    window.addEventListener('resize', function () {
        canvas.width = canvas.offsetWidth * devicePixelRatio;
        canvas.height = canvas.offsetHeight * devicePixelRatio;
    });
    window.dispatchEvent(new Event('resize'));
    appearGap = 1;
    sfxOn = true;
    window.addEventListener('load', function () {
        var currentTime = 0,
            lastTime = performance.now(),
            ticking = false,
            ctx = canvas.getContext('2d'),
            fps = 0,
            msgJustNow = [],
            playSfx = function (s) {
                return sfxOn && sfx[s].play();
            };
        audio.addEventListener('timeupdate', function () { currentTime = this.currentTime; });
        function tick() { ticking = false; requestAnimationFrame(ticker); }
        function ticker(now) {
            if (ticking) return;
            ticking = true;
            fps++;
            if (audio.paused) {
                currentTime = audio.currentTime;
                lastTime = now;
                tick();
                return;
            }
            currentTime += (now - lastTime) / 1e3 * audio.playbackRate;
            lastTime = now;
            var toDraw = { left: [], right: [], twin: [] },
                WIDTH = canvas.width,
                HEIGHT = canvas.height,
                halfWIDTH = Math.floor(WIDTH / 2),
                halfHEIGHT = Math.floor(HEIGHT / 2),
                drawer = function (i) {
                    if (i.type === 'point') {
                        ctx.beginPath();
                        ctx.arc(i.x, halfHEIGHT, size, 0, Math.PI * 2);
                        ctx.fill();
                    } else if (i.type === 'line') {
                        ctx.beginPath();
                        ctx.arc(i.x, halfHEIGHT, size, 0, Math.PI * 2);
                        ctx.fill();
                        ctx.fillRect(i.x, halfHEIGHT - size, i.dx, size * 2);
                        ctx.beginPath();
                        ctx.arc(i.x + i.dx, halfHEIGHT, size, 0, Math.PI * 2);
                        ctx.fill();
                    }
                };
            for (var off = 0; off < noteSchedule.length; off++) {
                var i = noteSchedule[off];
                if (i.time < currentTime && i.time > currentTime - .1 && msgJustNow.indexOf(i) === -1) {
                    i.message.length && log(i.message.join(', ') + '\t' + currentTime);
                    msgJustNow.push(i);
                }
                if (i.type === 'point') {
                    if (i.time < currentTime)
                        continue;
                    if (i.time > currentTime + appearGap + .2)
                        continue;
                } else if (i.type === 'line') {
                    if (i.end < currentTime)
                        continue;
                    if (i.time > currentTime + appearGap + .2)
                        continue;
                }
                var a = 0;
                switch (i.side) {
                    case 1:
                        a = -1;
                        break;
                    case 2:
                        a = 1;
                        break;
                }
                var x = Math.floor(WIDTH * (.5 + .5 / appearGap * a * (i.time - currentTime)));
                var group = i.isTwin ? 'twin' : i.side === 1 ? 'left' : 'right';
                switch (i.type) {
                    case 'point':
                        toDraw[group].push({
                            type: 'point',
                            x
                        });
                        break;
                    case 'line':
                        var dx = (i.end - i.time) * .5 / appearGap * a * WIDTH;
                        if (i.time < currentTime) {
                            dx -= halfWIDTH - x;
                            x = halfWIDTH;
                        }
                        toDraw[group].push({
                            type: 'line',
                            x,
                            dx
                        });
                        break;
                }
            }
            for (i = msgJustNow.length - 1; i >= 0; i--) {
                if (msgJustNow[i].type === 'point')
                    !(msgJustNow[i].time < currentTime && msgJustNow[i].time > currentTime - .1) && (playSfx('point'), msgJustNow.splice(i, 1));
                else if (msgJustNow[i].type === 'line')
                    msgJustNow[i].time < currentTime - .1 && !msgJustNow[i].sfxId && (msgJustNow[i].sfxId = playSfx('line')), !(msgJustNow[i].time < currentTime && msgJustNow[i].end > currentTime - .1) && (
                        sfx.line.stop(msgJustNow[i].sfxId), delete msgJustNow[i].sfxId, playSfx('release'), msgJustNow.splice(i, 1)
                    );
            }
            ctx.clearRect(0, 0, WIDTH, HEIGHT);
            var size = Math.round(36 * devicePixelRatio);
            if (toDraw.left.length) {
                ctx.fillStyle = 'rgb(255,81,81)';
                toDraw.left.forEach(drawer);
            }
            if (toDraw.right.length) {
                ctx.fillStyle = 'rgb(1,184,237)';
                toDraw.right.forEach(drawer);
            }
            if (toDraw.twin.length) {
                ctx.fillStyle = 'rgb(254,159,1)';
                toDraw.twin.forEach(drawer);
            }
            if (patternRaw.length) {
                for (i = 0; i < patternRaw.length; i++) {
                    if (patternRaw[i].time > currentTime) break;
                }
                patternRawDiv.textContent = (patternRaw[i - 1] || { pattern: '' }).pattern + '\n' + (patternRaw[i] || { pattern: '' }).pattern;
            }
            tick();
        }
        tick();
        setInterval(function () {
            document.getElementById('fps').textContent = fps;
            document.title = 'Wonder Parade | FPS:' + fps;
            fps = 0;
        }, 1e3);
        sfx = {
            point: new Howl({
                src: ['Data/Sound/System/p001.mp3']
            }),
            line: new Howl({
                src: ['Data/Sound/System/p002.mp3']
            }),
            release: new Howl({
                src: ['Data/Sound/System/p003.mp3']
            })
        };
    });
    window.addEventListener('message', function (e) {
        if (e.data === 'play') {
            console.log('received message, start sync play');
            audio.play();
        }
    });
    var songBlob = {};
    function loadSong(song) {
        if (songBlob[song])
            return (
                ((audio.src !== songBlob[song]) && (
                    audio.src = songBlob[song],
                    log('Song change to 【' + songSelect.selectedOptions[0].value + '】')
                )),
                audio.play()
            );
        log('Song change to 【' + songSelect.selectedOptions[0].textContent + '】');
        var xhr = loadResource('Data/Sound/' + song + '.m4a', { responseType: 'blob' });
        xhr.addEventListener('progress', function (e) {
            document.getElementById('downloading').textContent = 'Downloading...' + (e.loaded / e.total * 100).toFixed(2) + '%';
        });
        xhr.addEventListener('downloaded', function () {
            setTimeout(function () { document.getElementById('downloading').textContent = ''; }, 3e3);
            audio.src = URL.createObjectURL(this.response);
            songBlob[song] = audio.src;
            audio.play();
        });
    }
    loadResource('Data/list.wpd').addEventListener('downloaded', function () {
        var list = new DOMParser().parseFromString(this.response, 'text/html').getElementsByTagName('info')[0].textContent.replace(/\n/g, '').split(';');
        list.pop();
        songList = [];
        list.forEach(function (i) {
            var info = i.split('|'),
                song = info[1].substr(0, 3),
                theme = info[2],
                basic = info[3],
                advance = info[4],
                expert = info[5],
                title = info[10].substr(3),
                artist = info[11].substr(3);
            expert === '0' && (expert = false);
            songList.push({
                song,
                theme,
                basic,
                advance,
                expert,
                title,
                artist
            });
        });
        var child = [];
        songList.forEach(function (i) {
            if (i.artist === '?') return;
            var o = _('option', {
                value: i.song
            }, [_('text', i.title + ' - ' + i.artist)]);
            o.song = i;
            child.push(o);
        });
        songSelect = document.body.appendChild(_('select', {
            name: 'song',
            event: {
                change: function () {
                    song = this.value;
                    (diffSelect.querySelector('.select') || {}).className = 'diff';
                    diffSelect.lastChild.style.display = this.selectedOptions[0].song.expert ? 'inline' : 'none';
                }
            }
        }, child));
        diffSelect = document.body.appendChild(_('div', {
            style: { margin: '10px' },
            event: {
                click: function (e) {
                    if (e.target === this || e.target.classList.contains('select')) return;
                    (this.querySelector('.select') || {}).className = 'diff';
                    e.target.className = 'diff select';
                    loadSong(song);
                    loadPattern(song, ['', 'Basic', 'Advance', 'Expert'].indexOf(e.target.textContent));
                }
            }
        }, [_('span', { className: 'diff' }, [_('text', 'Basic')]), _('span', { className: 'diff' }, [_('text', 'Advance')]), _('span', { className: 'diff' }, [_('text', 'Expert')])]));
        patternRawDiv = document.body.appendChild(_('div', { style: { whiteSpace: 'pre-wrap' } }));
        document.body.appendChild(_('div', {}, [_('label', {}, [_('input', { type: 'checkbox', checked: true, event: { change: function () { sfxOn = this.checked; } } }), _('text', 'Sound Effect')])]))
    });
</script>
